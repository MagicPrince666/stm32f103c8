
/** 
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel6
  */
static void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
#n
  /* Configure DMA request hdma_memtomem_dma1_channel6 on DMA1_Channel6 */
  hdma_memtomem_dma1_channel6.Instance = DMA1_Channel6;
  hdma_memtomem_dma1_channel6.Init.Direction = DMA_MEMORY_TO_MEMORY;
  hdma_memtomem_dma1_channel6.Init.PeriphInc = DMA_PINC_ENABLE;
  hdma_memtomem_dma1_channel6.Init.MemInc = DMA_MINC_ENABLE;
  hdma_memtomem_dma1_channel6.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
  hdma_memtomem_dma1_channel6.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
  hdma_memtomem_dma1_channel6.Init.Mode = DMA_NORMAL;
  hdma_memtomem_dma1_channel6.Init.Priority = DMA_PRIORITY_LOW;
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel6) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }
#n#t/* DMA interrupt init */
#t/* DMA1_Channel1_IRQn interrupt configuration */
#tHAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
#tHAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
#t/* DMA1_Channel2_IRQn interrupt configuration */
#tHAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
#tHAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
#t/* DMA1_Channel3_IRQn interrupt configuration */
#tHAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
#tHAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
#t/* DMA1_Channel4_IRQn interrupt configuration */
#tHAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
#tHAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
#t/* DMA1_Channel5_IRQn interrupt configuration */
#tHAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
#tHAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
#n}
